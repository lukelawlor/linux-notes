#+title: Python Notes
#+date: July 23, 2023 - July 25, 2023
#+author: Luke Lawlor
#+email: lklawlor1@gmail.com
* Sources
** Where these notes are derived from
- [[https://wiki.python.org/moin/MovingToPythonFromOtherLanguages]]
- [[https://python.swaroopch.com/]]
  
** Helpful resources
- https://docs.python.org/3/library/ :: standard library documentation
- [[https://pypi.org/]] :: python package index
- [[https://peps.python.org/pep-0008/]] :: style guide
- [[https://wiki.python.org/moin/BeginnersGuide/Programmers]] :: tutorials

* Variables
** Strings
- Strings are immutable
- When you edit a string, you are generally creating a new string
  
*** Literals
#+begin_src python
  # the following are string literals
  str1 = 'string 1this is inside string 1'
  str2 = "string 2"
  str3 = '''line 1
  line 2
  line 3
  line 4
  '''
  return str1 + str2 + str3
#+end_src

#+RESULTS:
: string 1this is inside string 1string 2line 1
: line 2
: line 3
: line 4

*** Formatting
#+begin_src python
  # Formatting methods
  namber = 7
  str1 = 'using .format: number is {}'.format(namber)
  str2 = f'using f string: number is {namber}'
  str3 = '{guy} is {desc}'.format(guy='josh', desc='unintelligent')

  # Raw strings (prefixed with r) don't use escape sequences
  str4 = r'no escape sequences work here \n'

  return '{}\n{}\n{}\n\n{}'.format(str1, str2, str3, str4)
#+end_src

#+RESULTS:
: using .format: number is 7
: using f string: number is 7
: josh is unintelligent
: 
: no escape sequences work here \n
*** Methods
#+begin_src python :results output
  string = 'hello'

  # Get the length of a string
  print(len(string))

  if string.startswith('he'):
      print('string starts with he')

  if 'h' in string:
      print('sring contains h')

  if string.find('bruh') != -1:
      print('string contains bruh. Be careful.')

  seperator = '*'
  mylist = ['one', 'two', 'three']
  print(seperator.join(mylist))
#+end_src

#+RESULTS:
: 5
: string starts with he
: sring contains h
: one*two*three
*** Unicode
To use unicode, write =# encoding=utf-8= at the top of the program.

A unicode string literal is prefixed with =u=.

** Bools
The true and false identifiers are =True= and =False=.

** Globals
To use a global variable in a function, use the =global= keyword followed by the variable identifier.

** References
References are bound to objects. Assigning references to each other results in binding, not object copying.

To create a new copy of a list, use the slicing operation.

#+begin_src python :results output
  shoplist = ['food', 'colonel sanders', 'garfield']

  # Binding references
  sicklist = shoplist

  del sicklist[0]
  print(shoplist)

  # Creating a copy of the object
  sicklist = shoplist[:]

  del sicklist[0]
  print(shoplist)
#+end_src

#+RESULTS:
: ['colonel sanders', 'garfield']
: ['colonel sanders', 'garfield']

** Data structures
*** List
Lists are like C arrays, but you can add, remove, and search for items. They are also initialized with square brackets instead of curly braces.

Lists can be used as *sequences*.

#+begin_src python
  mylist = ['python', 'has', 'lists', 'woah']
  mylist[0] = 'snake'
  del mylist[1]
  mylist.append('a string')
  return mylist
#+end_src

#+RESULTS:
| snake | lists | woah | a string |

*** Tuple
A tuple is like a list but immutable and with no methods. Tuples are initialized with parentheses.

An empty tuple is initialized with =()=, and a tuple with 1 item is initialized with =(item_name, )=. Note that the single comma after the item is needed.

*** Dictionary
A dictionary, or dict, contains key-value pairs.

Keys must be immutable objects.

#+begin_src python :results output
  mydict = {
      'key1' : 'value1',
      'key2' : 'value2',
      }
  mydict['key2'] = 'newvalue'
  if 'key3' in mydict:
      print('key3 exists')
  else:
      print('key3 exists NOT!')
  print('length of mydict is', len(mydict))
  for k, v in mydict.items():
      print('key is', k)
      print('value is', v)
      print('')
#+end_src

#+RESULTS:
: key3 exists NOT!
: length of mydict is 2
: key is key1
: value is value1
: 
: key is key2
: value is newvalue
: 

*** Sequence
A *sequence* is an array object with the following features:
+ membership tests (=in= and =not in= expressions)
+ indexing/subscription operations
+ slicing operations

Negative indexes wrap around.

Slicing operations are in the format =1:2:3=, where =1=, =2=, and =3= are arguments
- There must be at least one =:=
- =1= is the starting index to include in the selection. The item at this index is included.
- =2= is the ending index to include in the selection. The item at this index is not included.
- =3= is the step for slicing
- Any argument can be left blank
  - blank =1= is the same as =1= being 0
  - blank =2= is the same as =2= being the length of the sequence
  - blank =3= is the same as =3= being 1

#+begin_src python :results output
  shoplist = ['apple', 'mango', 'carrot', 'banana']
  name = 'swaroop'
  
  # Indexing or 'Subscription' operation #
  print('Item 0 is', shoplist[0])
  print('Item 1 is', shoplist[1])
  print('Item 2 is', shoplist[2])
  print('Item 3 is', shoplist[3])
  print('Item -1 is', shoplist[-1])
  print('Item -2 is', shoplist[-2])
  print('Character 0 is', name[0])
  
  # Slicing on a list #
  print('Item 1 to 3 is', shoplist[1:3])
  print('Item 2 to end is', shoplist[2:])
  print('Item 1 to -1 is', shoplist[1:-1])
  print('Item start to end is', shoplist[:])
  
  # Slicing on a string #
  print('characters 1 to 3 is', name[1:3])
  print('characters 2 to end is', name[2:])
  print('characters 1 to -1 is', name[1:-1])
  print('characters start to end is', name[:])
#+end_src

#+RESULTS:
#+begin_example
Item 0 is apple
Item 1 is mango
Item 2 is carrot
Item 3 is banana
Item -1 is banana
Item -2 is carrot
Character 0 is s
Item 1 to 3 is ['mango', 'carrot']
Item 2 to end is ['carrot', 'banana']
Item 1 to -1 is ['mango', 'carrot']
Item start to end is ['apple', 'mango', 'carrot', 'banana']
characters 1 to 3 is wa
characters 2 to end is aroop
characters 1 to -1 is waroo
characters start to end is swaroop
#+end_example

*** Set
Sets are *unordered* collections of objects.

With sets, you can...
- test for membership
- check for subsets of another set
- find the intersection between two sets

* Operators
| **  | power                                |
| //  | divide and floor (like int division) |
| not | bool not                             |
| and | bool and                             |
| or  | bool or                              |
| del | deletes an object                    |

* Control Flow
** for
=for..in= iterates over a *sequence* of objects.

#+begin_src python :results output
  # will print from 1 to 4
  print('loop 1')
  for i in range(1, 5):
      print(i)

  # Range includes the numbers from the first arg up to the second arg, never including the second arg
  # The third arg is the step count
  print('loop 2')
  for i in range(1, 20, 3):
      print(i)
#+end_src

#+RESULTS:
#+begin_example
loop 1
1
2
3
4
loop 2
1
4
7
10
13
16
19
#+end_example

** break
Using =break= will skip the execution of an =else= block that comes directly after =while= or =for=.

* Functions
** Writing functions
#+begin_src python :results output
  def func(a, b, c):
	print('a is', a)
	print('b is', b)
	print('c is', c)

  # Using keyword arguments
  func(a=4, b=5, c=3)

  # Variable argument functions
  # params with 1 * = tuples
  # params with 2 * = dicts
  def total(a=5, *numbers, **phonebook):
      print('a', a)

      #iterate through all the items in tuple
      for single_item in numbers:
          print('single_item', single_item)

      #iterate through all the items in dictionary    
      for first_part, second_part in phonebook.items():
          print(first_part,second_part)

  total(10,1,2,3,Jack=1123,John=2231,Inge=1560)

#+end_src

#+RESULTS:
#+begin_example
a is 4
b is 5
c is 3
a 10
single_item 1
single_item 2
single_item 3
Jack 1123
John 2231
Inge 1560
a string on the first logical line of a function, like this one, is a docstring, which is used for documentation
#+end_example
** Built-in functions
- dir(object) :: returns a list of attributes contained in object
- dir() :: returns a list of attributes for the current module
- len() :: returns the length of a sequence
- int(), str() :: convert an object to an int or string respectively

* OOP
** Terminology
- method :: function in a class
- field :: member variable in a class
- attributes :: fields and methods of a class
- instance :: object of a class
- attribute reference :: a reference that can be used to access attributes (ex. =self=)
- polymorphism :: using a subclass as its base class
- multiple inheritance :: inheriting from multiple classes
  
** Types of fields
- Class variables
  - only one copy shared among all instances of the class
  - initialized in the class body outside of =__init__=
  - accessed through =ClassName.variable_name=
  - similar to static class variables from C++ & Java
- Object variables
  - each instance owns its own copy of one
  - initialized in =__init__=
  - accessed through =self.variable_name=

An object variable with the same name as a class variable will overshadow the class variable.

Prefixing a field name with =__= causes Python to use name mangling to make the field private.

** Methods
The first parameter in the parameter list for a method is the name of the =self= variable. It is common practice to name this variable =self=. When a method is called, no argument is provided for =self=.

=self= is equivalent to C++'s =this= pointer and Java's =this= reference.

=myobject.method(arg1, arg2)= is equivalent to =MyClass.method(myobject, arg1, arg2)=.

*** Class methods
Inserting the =@classmethod= *decorator* on a line before a method definition makes the method a *class method*.

To call a method as a class method, use =classmethod(method_name)=.

The first argument of a class method contains the type of class that the method is called from. It is common practice to name this variable =cls=.

#+begin_src python :results output
class Human:
    def __init__(self, name):
        self.name = name

    @classmethod
    def talk(cls):
        print(cls)

class Fred(Human):
    def __init__(self, name):
        Human.__init__(self, name)

h = Human('human')
f = Fred('josh')
h.talk()
f.talk()
#+end_src

#+RESULTS:
: <class '__main__.Human'>
: <class '__main__.Fred'>

** Inheritance
To inherit a class, add the name of the base class(es) encased in a tuple in parentheses after the name of a class in its definition.

To call a base class constructor from a subclass, use =SuperClassName.__init__(self, args)=. The constructor of the base class is implicitly called if no =__init__= method is defined for the subclass.

When a method is called, Python first checks for it in the subclass. If it is not found, Python checks the base classes, starting with the first base class listed in the tuple of base classes that the subclass was defined with.

** Misc
- =self.__class__= accesses the class for an object
  
* IO
** Input
- input() :: returns string input from the user
- open(filename, mode) :: opens a file like C's =fopen= and returns a file object
  - If mode contains...
    - w, writing
    - a, appending
    - r, reading
    - t, text
    - b, binary
  - By default, reading & text is assumed
- io.open(filename, mode, encoding) :: same as =open()=, but encoding can be set using keyword arguments
  - =encoding= is a text encoding, such as ='utf-8'=
  - when setting =encoding=, make sure you are using text mode
- file.write(str) :: writes a string to a file
- file.readline() :: returns a line from the filex
- file.read() :: returns the entire contents of the file
- file.close() :: closes a file

#+begin_src python
# input() returns string input from the user
print('type something plz. ')
string = input()
print(f'got {string}.')

# The return value of input() can be cast to another type, such as int
num = int(input('''What's your favorite number? '''))
print(num)

#+end_src

#+RESULTS:

** Output
#+begin_src python :results output
  # print() takes a variable amount of arguments of different types
  # each argument is printed out and separated with a single space
  print('arg1', 'arg2', 'arg3')
  
  # By default, python adds newlines after calls to print
  print('line 1')
  print('line 2')

  # You can remove the newline like so:
  print('part 1 ', end='')
  print('part 2', end='')

  print('')

  # Easy ways to print the values of variables
  print('number is', 0)

#+end_src

#+RESULTS:
: arg1 arg2 arg3
: line 1
: line 2
: part 1 part 2
: number is 0

* Exceptions
** Terminology
- raise :: throw an exception

** Handling
Exceptions can be handled with the =try..except= statement.

To create an =except= block, write =except= followed by an exception or a parenthesized list of exceptions. If no exception is supplied, it will handle all exceptions.

If one exception is supplied with an =except= block, you can write =as ex= to make the thrown exception available as a variable =ex=.

The =else= block after a =try= block is executed if no exception occurs.

The =finally= block will always be run whether an exception occurs or not.

#+begin_src python :results output
try:
    text = input('guy@pc:~$ ')
except EOFError:
    print('how could you EOF on me like that? :(')
except KeyboardInterrupt:
    print('''ok. Fine then. just cancel me... NO I'm not mad,. that's cool... >:(''')
else:
    print('running {}...'.format(text))
#+end_src

#+RESULTS:
: guy@pc:~$ how could you EOF on me like that? :(

** Raising
Thrown exceptions should be objects that must be derived from the =Exception= class.

#+begin_src python :results output
class MySickException(Exception):
    '''A user-defined exception class.'''
    def __init__(self, num):
        Exception.__init__(self)
        self.num = num

    def __str__(self):
        return 'mysickexception with num = {}'.format(self.num)

try:
    raise MySickException(7)
except MySickException as ex:
    print(ex)
#+end_src

#+RESULTS:
: mysickexception with num = 7

** with
=with= statements can be used to abbreviate creating an object in a =try= block and destroying it in a =finally= block.

Following the syntax of =with func() as o:=, the return value of =func()= should be an object with a =__enter__= and =__exit__= method. =__enter__= is called when the object is constructed, and =__exit__= is called after finishing the =with= block. The object will be made available within the =with= block as =o=.

#+begin_src python :results output
with open("poem.txt") as f:
    for line in f:
        print(line, end='')
#+end_src

#+RESULTS:
: not a poem
: umm
: yeah

* Modules
Modules are essentially libraries. They can be written in Python or other languages like C.

You can import modules with =import module_name=. Objects from the imported module will be accessible with their identifier prefixed with the module name. You can import objects from modules into the global namespace by using =from module_name import object_name=.

=__name__= is a special variable that, if equal to ='__main__'=, tells us that the module is being run standalone.

=__version__= is a special variable that indicates the version of a module.

The subheadings of this heading are names of built-in modules.

** logging
logging is for debug message logging.

#+begin_src python :results output
import os
import platform
import logging

if platform.platform().startswith('Windows'):
    logging_file = os.path.join(os.getenv('HOMEDRIVE'),
                                os.getenv('HOMEPATH'),
                                'test.log')
else:
    logging_file = os.path.join(os.getenv('HOME'),
                                'test.log')

print("Logging to", logging_file)

logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s : %(levelname)s : %(message)s',
    filename=logging_file,
    filemode='w',
)

logging.debug("Start of the program")
logging.info("Doing something")
logging.warning("Dying now")
#+end_src

** pickle
Pickle can be used to story Python objects in files

- pickle.dump(object, file) :: dumps object to file opening for writing in binary, known as pickling
- pickle.load(file) :: returns an object stored in a file, known as unpickling

** sys
sys contains systemic-specific functionality.

- =sys.argv= is like C's =argv=
- =sys.path= is equal to the =PYTHONPATH= environment variable
- =sys.version_info= tuple that provides Python version info
- sys.stdout.flush() :: flushes standard output

* Misc
** Syntax
- =\= can be placed at the end of any line to continue the line on the next one. This is called *explicit line joining*.
- =pass= indicates an empty block, similar to =;= in C or a "no op" instruction
** Docstrings
- Docstrings are strings placed on lines directly after a function or class definition
- They are used for documentation
- They can be accessed with =func_or_class_name.__doc__=

** Python compared to other languages
- GUI is easier in Python than Perl

** Advice
- Try to use the standard library
- For tricky iterations, use functions like map, filter, reduce, and zip
- Watch out for confusing different references to the same object with different references to unique objects
